int nVert = grafo.numVertices();
	string * arregloEtiquetas = new string[grafo.numVertices() ];
    bool * modificado = new bool[grafo.numVertices()];
    Grafo minCosto;
    vector<int> distancias;
    vector<bool> visitado;
    int n = grafo.numVertices();
    int costoTotal = 0;
    distancias.resize(n);
    visitado.resize(n);
    int pivote;
    Relacion<tipoVertice> R11MinCosto;
	Relacion<tipoVertice> R11;
    pair<int, tipoVertice> p;
    pair<int, tipoVertice> p2;
    tipoVertice v = grafo.primerVertice();
    tipoVertice vn;
    int contador = 0;
   while(v != 0){
        visitado[contador] = false;
        arregloEtiquetas[contador] = grafo.etiqueta(grafo.primerVertice());
        p = std::make_pair(contador,v);
        R11.insert(p);
        vn  = minCosto.agregarVertice(grafo.etiqueta(v));
        p2 = std::make_pair(contador, vn);
        R11MinCosto.insert(p2);
        contador++;
        v = grafo.siguienteVertice(v);;
    }
    for(int i = 1; i <= n -1; i++){
        if(grafo.adyacentes(R11.at(0), R11.at(i))){
            distancias[i] = grafo.peso((R11.at(0)), R11.at(i));
        }
        else{
            distancias[i] = INT_MAX;
        }
        modificado[i] = false;
    }
    for(int i = 1; i <= n -1; i++){
        pivote = encontrarMinimo(n, visitado, distancias);
        for(int j = 1; j <= n-1; j++){
            if(j != pivote){
            if(grafo.adyacentes(R11.at(pivote), R11.at(j))){
            if(grafo.peso(R11.at(pivote), R11.at(j)) < distancias[j] && !minCosto.adyacentes(R11MinCosto.at(pivote), R11MinCosto.at(j))){
                distancias[j] = grafo.peso(R11.at(pivote), R11.at(j));
                arregloEtiquetas[j] = grafo.etiqueta(R11.at(pivote));
                minCosto.agregarArista(R11MinCosto.at(pivote), R11MinCosto.at(j),grafo.peso(R11.at(pivote), R11.at(j)));
            }
            }
        }
        }  
    };
    std::cout<<"Arbol de minimo costo"<<std::endl;
    for(int i = 1; i <= n -1; i++){
        std::cout<<"arista "<<i<<std::endl;
        std::cout<<"Vertices: "<<grafo.etiqueta(R11.at(i))<<" y "<<arregloEtiquetas[i]<<std::endl;
        std::cout<<"Costo : "<<distancias[i]<<std::endl;
        costoTotal += distancias[i];
    }
    std::cout<<"Costo total : "<<costoTotal<<std::endl;
    minCosto.vaciar();



minimo
int posPivote = -1;
    int valorMinimo = INT_MAX;
    for(int i = 1; i <= tam -1; i++){
        if(v[i] == false){
        if(d[i] < valorMinimo){
            valorMinimo = d[i];
            posPivote = i;
        }
    }
    }
    v[posPivote] = true;
    return posPivote;